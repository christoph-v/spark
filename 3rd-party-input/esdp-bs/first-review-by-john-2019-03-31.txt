Your documents give me the feeling of a network protocol, whereas mine feel more
like a database or http/rest.  Probably because we have our separate work
experience. I think the DIS protocol works more like radios and GPS would be my
guess.  With X3D MU, we are defining in a space of 1) chat protocols like XMPP
and IRC 2) database protocols like SQL*Net 3) Object/Multimedia protocols like
WebRTC and SIP.

 

Some comments:
People build webapps to protect users from their databases.  The corollary to
this is that there might be user information that is exclusive to a user or group.

My primary request for a network protocol is that they are difficult to debug,
thus you should create them similar to a command prompt, like request/reply,
UTF-8, etc. However, I think with MU, you are getting events from others, so
it’s more like debugging pub/sub or a messaging system like Oracle AQ, Java JMS,
IBM MQ, Apache ActiveMQ, etc.

What do you think about using pub/sub or messaging?  What “style” of protocol
works best in SP-ARK’s case?  I think one to many and many to one is one of the
best features of pub/sub, but often it takes a lot infrastructure to maintain
the queues.

Maybe we should step back and define the objects we are communicating.
    Avatar (initial H-Anim figure) and position, orientation, motion (ongoing).
       This is done by pc.multiplayer tag around the world
    Things the avatar might be carrying (shapes transformed by the avatars
        position, orientation and motion)
    Sounds-chat-video applied to avatar position
    ???
